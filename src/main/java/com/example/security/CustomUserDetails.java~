package com.telegram.security;

import com.telegram.dto.workspaceDto.WebUserDto;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.HashSet;
import java.util.UUID;

/**
 * Заглушка для пользовательских деталей
 */
@AllArgsConstructor
@Slf4j
public class CustomUserDetails implements UserDetails {

    final WebUserDto webUser;

    /**
     * Возвращает роли и разрешения пользователя
     * В этой заглушке возвращает пустой набор
     * 
     * @return Пустой набор ролей/разрешений
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        log.debug("Getting authorities for user: {}", webUser.getEmail());
        return new HashSet<>();
    }

    @Override
    public String getPassword() {
        return null;
    }

    @Override
    public String getUsername() {
        return webUser.getEmail();
    }
    
    /**
     * Получить ID пользователя
     * 
     * @return ID пользователя
     */
    public UUID getUserId() {
        return webUser.getId();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}
