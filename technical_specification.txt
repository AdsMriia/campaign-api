ТЕХНИЧЕСКОЕ ЗАДАНИЕ ДЛЯ МИКРОСЕРВИСА CAMPAIGN-API

1. АРХИТЕКТУРА БАЗЫ ДАННЫХ
==========================

Основные сущности:

1. Campaign - основная сущность кампании:
   - UUID id - уникальный идентификатор
   - String title - название кампании (должно быть уникальным)
   - OffsetDateTime startDate - дата начала кампании
   - OffsetDateTime endDate - дата окончания кампании
   - OffsetDateTime createdAt - дата создания записи
   - UUID createdBy - идентификатор пользователя-создателя
   - CampaignType campaignType - тип кампании (BROADCAST, IMMEDIATE)
   - CompanyStatus status - статус кампании (DRAFT, SCHEDULED, RUNNING, COMPLETED, FAILED, STOPPED)
   - UUID workspaceId - идентификатор рабочего пространства
   - UUID channelId - идентификатор канала
   - Boolean isArchived - признак архивации
   - Long maxRetargeted - максимальное количество ретаргетируемых пользователей
   - Integer audiencePercent - процент аудитории, которой будет отправлено сообщение
   - BigDecimal maxCost - максимальная стоимость кампании

2. CampaignCreative - связь между кампанией и креативами:
   - UUID id - уникальный идентификатор
   - Message message - креатив (сообщение)
   - Campaign campaign - кампания
   - Integer percent - процентное распределение для А/B тестирования
   - Integer ordinal - порядковый номер креатива

3. Message - креатив (сообщение) для кампании:
   - UUID id - уникальный идентификатор
   - Boolean markDown - флаг использования markdown форматирования
   - UUID workspaceId - идентификатор рабочего пространства
   - String title - заголовок сообщения
   - MessageType type - тип сообщения
   - MessageStatus status - статус сообщения
   - Integer telegramId - идентификатор сообщения в Telegram
   - String text - текст сообщения
   - UUID createdBy - идентификатор создателя
   - UUID channelId - идентификатор канала
   - OffsetDateTime createdAt/updatedAt - даты создания/обновления
   - Set<Action> actions - кнопки/действия для сообщения
   - Set<Media> medias - медиафайлы, прикрепленные к сообщению

4. Media - медиафайлы (изображения, видео):
   - UUID id - уникальный идентификатор
   - Message message - связанное сообщение
   - UUID workspaceId - идентификатор рабочего пространства
   - UUID fileName - имя файла
   - String fileExtension - расширение файла

5. Action - кнопки/действия для интерактивных сообщений:
   - UUID id - уникальный идентификатор
   - Message message - связанное сообщение
   - String text - текст кнопки
   - String link - URL для перехода
   - Integer ordinal - порядковый номер кнопки

6. RetargetStats - статистика ретаргетинга:
   - UUID id - уникальный идентификатор
   - Campaign campaign - кампания
   - Integer sentMessageCount - количество отправленных сообщений
   - Integer retargetCount - количество ретаргетированных пользователей
   - OffsetDateTime createdAt - дата создания статистики

7. CampaignToSubscribers - связь кампании с подписчиками:
   - UUID id - уникальный идентификатор
   - Campaign campaign - кампания
   - UUID subscriberId - идентификатор подписчика
   - CampaignCreative campaignCreative - креатив кампании
   - Boolean retargeted - флаг успешного ретаргетинга


2. СОЗДАНИЕ КАМПАНИИ
====================

Эндпоинт: POST /campaigns/submit

Параметры:
- Заголовок (должен быть уникальным)
- Креативы (один или несколько)
- Выбор канала
- Выбор процента аудитории
- Статус (моментальная или обычная)
- Даты:
  - Для обычной: дата начала и продолжительность 7 дней (3+4)
  - Для моментальной: только дата начала
- Максимальная стоимость (за всех, кому придет сообщение)
- Максимальное количество ретаргетированной аудитории

Поток работы:
1. Валидация входных данных
2. Расчет стоимости кампании на основе максимального количества пользователей
3. Проверка баланса пользователя
4. Создание записи кампании в БД
5. Создание связей с креативами
6. Отправка задания в TdLib сервис для выполнения кампании


3. БАЗОВАЯ РАССЫЛКА
===================

Процесс рассылки:
1. Первый этап - отправка всем пользователям:
   - Продолжительность: 3 дня
   - Сбор отдельного набора статистики
2. Второй этап - отправка пользователям, которые не подписались в течение 24 часов после завершения первого этапа:
   - Продолжительность: 2 дня
   - Перерыв: 1 день после первого этапа

Полный цикл:
- Общая продолжительность: 7 дней (3 дня первый этап + 1 день перерыв + 2 дня второй этап + 1 день финальный анализ)
- Сбор статистики для каждой фазы и всего цикла
- API для получения полной и промежуточной статистики


4. МОМЕНТАЛЬНАЯ РАССЫЛКА
========================

- Отправка сразу или по расписанию
- Учет задержек Telegram API при массовой отправке
- Отправка всем пользователям или выбранному проценту аудитории
- Возможность остановки кампании


5. СТАТИСТИКА КРЕАТИВОВ
=======================

Эндпоинт: Интегрирован в GET /campaigns/{id}/stats

Метрики:
- Количество отправлений
- Количество ретаргетированных пользователей
- Процент ретаргетированных пользователей (CTR)
- Сравнительная эффективность креативов (при использовании нескольких креативов)


6. СТАТИСТИКА КАМПАНИИ
=====================

Эндпоинт: GET /campaigns/{id}/stats

Метрики:
- Процент пользователей, получивших сообщение
- Дата начала
- Дата окончания (если применимо)
- Количество пользователей, получивших креатив (для каждого креатива и для кампании в целом)
- Количество ретаргетированных пользователей (для каждого креатива и для кампании в целом)
- CTR (для каждого креатива и для кампании в целом)
- ROI (коэффициент возврата инвестиций)


7. ДОПОЛНИТЕЛЬНЫЕ ЭНДПОИНТЫ
===========================

- GET /campaigns - получение всех кампаний с фильтрацией
- GET /campaigns/{id} - получение кампании по идентификатору
- POST /campaigns/{id}/stop - остановка кампании
- DELETE /campaigns/{id} (или PATCH /campaigns/{id}/archive) - архивирование кампании
- GET /campaigns/stats - получение общей статистики по кампаниям
- GET /campaigns/intervals - получение интервалов дат кампаний
- GET /campaigns/expected/retarget - получение оценки числа подписчиков для ретаргетинга


ТЕХНИЧЕСКИЕ ТРЕБОВАНИЯ
=====================

1. Микросервис должен быть реализован на Java 21 с использованием Spring Boot 3.2.x
2. Для работы с базой данных использовать Spring Data JPA и PostgreSQL
3. Применять Liquibase для управления миграциями БД
4. Обеспечить аутентификацию и авторизацию с использованием JWT
5. Реализовать интеграцию с TdLib сервисом для выполнения отправки сообщений через Telegram
6. Документировать API с использованием Swagger/OpenAPI
7. Обеспечить логирование всех операций и обработку ошибок
8. Реализовать механизмы проверки баланса пользователя и расчета стоимости кампаний


ПЛАН РАЗРАБОТКИ
==============

1. Настройка проекта и подключение зависимостей
2. Создание моделей данных и миграций БД
3. Реализация бизнес-логики создания и управления кампаниями
4. Реализация логики работы с креативами
5. Интеграция с TdLib сервисом
6. Реализация сбора и анализа статистики
7. Внедрение безопасности и авторизации
8. Тестирование и документирование API


ОЖИДАЕМЫЕ РЕЗУЛЬТАТЫ
===================

1. Готовый микросервис, соответствующий всем требованиям
2. Полный набор API для управления кампаниями и получения статистики
3. Интеграция с TdLib для фактической отправки сообщений
4. Документированный API с использованием Swagger
5. Реализованные механизмы для двух типов кампаний (обычная и моментальная) 